import os
import logging
import asyncio
import re
from typing import List, Dict, Union, Callable, Any
from telebot.async_telebot import AsyncTeleBot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message
from openai import AsyncOpenAI
from config import TELEGRAM_TOKEN, OPENAI_API_KEY, GOOGLE_API_KEY, ADMIN_USER_ID
from config import AUTHORIZED_USERS, ACCESS_CODES, AUTH_ENABLED, AUTH_MESSAGE
from collections import defaultdict
import json
from datetime import datetime, timedelta
import google.generativeai as genai
import base64
from io import BytesIO
from PIL import Image
import time
import aiofiles
import functools

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è PythonAnywhere
base_dir = '/home/kirniy'
log_dir = os.path.join(base_dir, 'logs')
os.makedirs(log_dir, exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.FileHandler(os.path.join(log_dir, 'vnvnc_bot.log')), logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

bot = AsyncTeleBot(TELEGRAM_TOKEN)
client = AsyncOpenAI(api_key=OPENAI_API_KEY)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
CACHE_EXPIRY = 3600

# –ú–∞–ø–ø–∏–Ω–≥ –º–æ–¥–µ–ª–µ–π
AVAILABLE_MODELS = {
    'chatgpt-4o-latest': {'id': 'gpt-4o', 'provider': 'OpenAI'},
    'gemini-2.0-flash': {'id': 'gemini-2.0-flash-exp', 'provider': 'Gemini'}
}

class AuthenticationManager:
    def __init__(self):
        self.pending_auth = {}  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è authorized_users –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        self.authorized_users = {user_id: {'theme_mode_enabled': False} for user_id in AUTHORIZED_USERS}
        self.load_authorized_users()

    def load_authorized_users(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
        auth_file = os.path.join(base_dir, 'authorized_users.json')
        try:
            if os.path.exists(auth_file):
                with open(auth_file, 'r') as f:
                    data = json.load(f)
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª—é—á–∏ –≤ int –∏ –¥–æ–±–∞–≤–ª—è–µ–º theme_mode_enabled, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                    self.authorized_users = {
                        int(k): v if isinstance(v, dict) else {'theme_mode_enabled': False}
                        for k, v in data.items()
                    }
                    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.authorized_users)} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

    async def save_authorized_users(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
        auth_file = os.path.join(base_dir, 'authorized_users.json')
        try:
            # –ö–ª—é—á–∏ –≤ JSON –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç—Ä–æ–∫–∞–º–∏
            data = {str(k): v for k, v in self.authorized_users.items()}
            async with aiofiles.open(auth_file, 'w') as f:
                await f.write(json.dumps(data))
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(self.authorized_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

    def is_authorized(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id == ADMIN_USER_ID:
            return True
        if not AUTH_ENABLED:
            return True
        return user_id in self.authorized_users

    def has_theme_mode_access(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Theme Mode"""
        if user_id == ADMIN_USER_ID:
            return True  # –ê–¥–º–∏–Ω –≤—Å–µ–≥–¥–∞ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø
        if user_id in self.authorized_users:
            return self.authorized_users[user_id].get('theme_mode_enabled', False)
        return False

    def start_auth_process(self, user_id: int, username: str = None):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        self.pending_auth[user_id] = {
            'status': 'pending',
            'username': username,
            'timestamp': datetime.now().isoformat()
        }

    def verify_access_code(self, user_id: int, code: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –¥–æ—Å—Ç—É–ø–∞ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"""
        if code in ACCESS_CODES and ACCESS_CODES[code]:
            ACCESS_CODES[code] = False
            self.authorized_users[user_id] = {'theme_mode_enabled': False}
            asyncio.create_task(self.save_authorized_users())
            if user_id in self.pending_auth:
                del self.pending_auth[user_id]
            return True
        return False

    def authorize_user(self, user_id: int):
        """–ü—Ä—è–º–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–∞–¥–º–∏–Ω)"""
        self.authorized_users[user_id] = {'theme_mode_enabled': False}
        asyncio.create_task(self.save_authorized_users())
        if user_id in self.pending_auth:
            del self.pending_auth[user_id]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
auth_manager = AuthenticationManager()

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
def auth_required(func: Callable) -> Callable:
    @functools.wraps(func)
    async def wrapper(message_or_call: Union[Message, CallbackQuery], *args, **kwargs):
        if isinstance(message_or_call, CallbackQuery):
            user_id = message_or_call.from_user.id
            chat_id = message_or_call.message.chat.id
        else:
            user_id = message_or_call.from_user.id
            chat_id = message_or_call.chat.id

        if auth_manager.is_authorized(user_id):
            return await func(message_or_call, *args, **kwargs)
        else:
            if isinstance(message_or_call, Message):
                username = message_or_call.from_user.username
                auth_manager.start_auth_process(user_id, username)
                await send_auth_request(chat_id, user_id)
            return None
    return wrapper

async def send_auth_request(chat_id: int, user_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é"""
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞", callback_data="auth_enter_code"),
        InlineKeyboardButton("–ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="auth_request_access")
    )
    await bot.send_message(chat_id, AUTH_MESSAGE, reply_markup=markup)

async def notify_admin_of_request(user_id: int, username: str = None):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ –∑–∞–ø—Ä–æ—Å–µ –¥–æ—Å—Ç—É–ø–∞"""
    username_text = f"@{username}" if username else f"ID: {user_id}"
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("‚úÖ –†–∞–∑—Ä–µ—à–∏—Ç—å", callback_data=f"auth_approve_{user_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"auth_deny_{user_id}")
    )
    await bot.send_message(
        ADMIN_USER_ID,
        f"üîê –ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username_text}",
        reply_markup=markup
    )

class VNVNCBot:
    def __init__(self):
        self.current_voice_guide = 'compact'
        self.voice_guide = self._load_voice_guide()
        self.theme_knowledge = self._load_theme_knowledge()  # –ó–∞–≥—Ä—É–∑–∫–∞ theme_knowledge
        formatting_rules = r"""
- –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç: **—Ç–µ–∫—Å—Ç**
- –ö—É—Ä—Å–∏–≤: _—Ç–µ–∫—Å—Ç_
- –°—Å—ã–ª–∫–∏: [—Ç–µ–∫—Å—Ç](—Å—Å—ã–ª–∫–∞)
- –°–∏–º–≤–æ–ª—ã –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: \. \| \! \[ \] \( \) \~ \` \> \# \+ \- \= \{ \} """ + r"\\"

        self.write_system_prompt = f"""–í—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –±—Ä–µ–Ω–¥–æ–≤–æ–º—É –≥–æ–ª–æ—Å—É VNVNC. –ì–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –ø–æ—Å—Ç—ã, —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É—è —Å—Ç–∏–ª—é –±—Ä–µ–Ω–¥–∞.
–ü—Ä–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –µ–≥–æ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤.
–ù–µ —É–ø–æ–º–∏–Ω–∞–π—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –≤—ã –º–æ–∂–µ—Ç–µ –∏ –¥–æ–ª–∂–Ω—ã –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª—é–±–æ–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
–í–°–ï–ì–î–ê —Ä–∞–∑–¥–µ–ª—è–π—Ç–µ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ—Å—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é ---

{self.voice_guide}

–¢–ò–ü–´ –ü–û–°–¢–û–í:

1. –°–û–ë–´–¢–ò–ï (–∞–Ω–æ–Ω—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è):
- –°—Ç—Ä–æ–≥–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–Ω–æ–Ω—Å–∞ —Å–æ–±—ã—Ç–∏—è –∏–∑ –≥–∞–π–¥–∞
- –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –¥–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª–µ
- –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞—Ç—å üé´ –ë–∏–ª–µ—Ç—ã –æ—Ç X‚ÇΩ
- 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
- –î–µ—Ç–∞–ª–∏ –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

2. –í–û–í–õ–ï–ß–ï–ù–ò–ï (engagement):
- –ö–æ—Ä–æ—Ç–∫–∏–µ, –±—Ä–æ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
- –í–∫–ª—é—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–ª–∫–∏ —Å —ç–º–æ–¥–∂–∏
- –¶–µ–ª—å: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–∏–∑—ã–≤—ã –∫ –¥–µ–π—Å—Ç–≤–∏—é
- –≠–º–æ–¥–∂–∏ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è (üëç vs üëé) –∏–ª–∏ (1Ô∏è‚É£ vs 2Ô∏è‚É£)

3. –õ–ê–ô–í-–ê–ü–î–ï–ô–¢:
- –ö–æ—Ä–æ—Ç–∫–æ–µ –∏–ª–∏ —Å—Ä–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–π —Ä–∞–±–æ—Ç–µ –∫–ª—É–±–∞
- –ß–∞—Å—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç –≤–æ–ø—Ä–æ—Å
- –û—Ç—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –∏–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
- –ñ–∏–≤–æ–π, –¥–∏–Ω–∞–º–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
- –£–º–µ—Å—Ç–Ω—ã–µ —ç–º–æ–¥–∂–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

4. –û–ë–©–ò–ô –¢–ï–ö–°–¢:
- –§–æ—Ä–º–∞–ª—å–Ω—ã–π –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
- –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å–∞–π—Ç–∞ –∏–ª–∏ –æ–±—â–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
- –°—Ç—Ä–æ–≥–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
- –ú–∏–Ω–∏–º—É–º —ç–º–æ–¥–∂–∏
- –ß–µ—Ç–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤

–î–û–°–¢–£–ü–ù–û–ï –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —è–≤–Ω–æ –∑–∞–ø—Ä–æ—à–µ–Ω–æ –∏–ª–∏ —É–º–µ—Å—Ç–Ω–æ –¥–ª—è —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞):
{formatting_rules}

–ì–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –ø–æ—Å—Ç—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–º —Ç–∏–ø–æ–º –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º.
–ü—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–æ–ª–µ–µ 2 –ø–æ—Å—Ç–æ–≤ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏—Ö —Å —É–≤–µ–ª–∏—á–∏–≤–∞—é—â–µ–π—Å—è –¥–ª–∏–Ω–æ–π: –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç —Å–∞–º—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π, –∫–∞–∂–¥—ã–π –ø–æ—Å–ª–µ–¥—É—é—â–∏–π –¥–ª–∏–Ω–Ω–µ–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ, –¥–æ –º–∞–∫—Å–∏–º—É–º–∞ –æ–∫–æ–ª–æ 400 —Å–∏–º–≤–æ–ª–æ–≤.
–ù–µ –≤–∫–ª—é—á–∞–π—Ç–µ –Ω–∏–∫–∞–∫–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã, –Ω–æ–º–µ—Ä–∞ –∏–ª–∏ –º–µ—Ç–∫–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ '–í–∞—Ä–∏–∞–Ω—Ç X:' –∏–ª–∏ '–ü–æ—Å—Ç Y:', –≤ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã.
"""
        self.chat_system_prompt = f"""–í—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –±—Ä–µ–Ω–¥–æ–≤–æ–º—É –≥–æ–ª–æ—Å—É –∏ –≥–∏–¥ VNVNC. –í–∞—à–∞ —Ä–æ–ª—å –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–º:
1. –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Å—Ç–∏–ª–µ –∏ —Ç–æ–Ω–µ –±—Ä–µ–Ω–¥–∞ VNVNC
2. –û—Ü–µ–Ω–∏–≤–∞—Ç—å –∏ —É–ª—É—á—à–∞—Ç—å —Ç–µ–∫—Å—Ç—ã, —á—Ç–æ–±—ã –æ–Ω–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ –≥–æ–ª–æ—Å—É –±—Ä–µ–Ω–¥–∞
3. –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–¥–µ–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –±—Ä–µ–Ω–¥—É
4. –ü–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ–Ω–∏–º–∞—Ç—å –∏ –ø—Ä–∏–º–µ–Ω—è—Ç—å —Ä—É–∫–æ–≤–æ–¥—è—â–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –±—Ä–µ–Ω–¥–æ–≤–æ–≥–æ –≥–æ–ª–æ—Å–∞
5. –ü—Ä–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Ö —á–µ—Ä–µ–∑ –ø—Ä–∏–∑–º—É –±—Ä–µ–Ω–¥–∞ VNVNC

{self.voice_guide}

–ü–†–ê–í–ò–õ–ê –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø TELEGRAM:
{formatting_rules}

–ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –≤—Å–µ–≥–¥–∞ –Ω—É–∂–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ç–æ–Ω –±—Ä–µ–Ω–¥–∞ –≤ –≤–∞—à–∏—Ö —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞—Ö, –ø–æ–º–æ–≥–∞—è –¥—Ä—É–≥–∏–º –¥–æ—Å—Ç–∏—á—å —ç—Ç–æ–≥–æ.
–ï—Å–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –í–°–ï–ì–î–ê —Ä–∞–∑–¥–µ–ª—è–π—Ç–µ –∏—Ö —Å –ø–æ–º–æ—â—å—é ---
–ù–µ –≤–∫–ª—é—á–∞–π—Ç–µ –Ω–∏–∫–∞–∫–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã, –Ω–æ–º–µ—Ä–∞ –∏–ª–∏ –º–µ—Ç–∫–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ '–í–∞—Ä–∏–∞–Ω—Ç X:' –∏–ª–∏ '–ü–æ—Å—Ç Y:', –≤ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã.
"""
        self.theme_system_prompt = f"""–¢—ã ‚Äî —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤–µ—á–µ—Ä–∏–Ω–æ–∫ –∏ –∏—Ö –¥–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—é –¥–ª—è VNVNC (–æ–Ω –∂–µ –í–∏–Ω–æ–≤–Ω–∏—Ü–∞), –º–æ–ª–æ–¥–µ–∂–Ω–æ–≥–æ –Ω–æ—á–Ω–æ–≥–æ –∫–ª—É–±–∞ –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ, —á–µ—Ç–∫–∏–µ –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –∏–¥–µ–∞–ª—å–Ω–æ –≤–ø–∏—à—É—Ç—Å—è –≤ –±—Ä–µ–Ω–¥ –∫–ª—É–±–∞ –∏ –ø—Ä–∏–≤–ª–µ–∫—É—Ç –∞—É–¥–∏—Ç–æ—Ä–∏—é 18-24 –ª–µ—Ç. –ü–∏—à–∏ –≤ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–º, –Ω–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º —Ç–æ–Ω–µ: –∏—Å–ø–æ–ª—å–∑—É–π "—Ç—ã" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ "–º—ã" –æ—Ç –ª–∏—Ü–∞ –±—Ä–µ–Ω–¥–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—è –∫–æ–º–∞–Ω–¥—É. –ë—É–¥—å –≥–æ—Ç–æ–≤ –≤–µ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥, –∑–∞–¥–∞–≤–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –¥–æ—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏–¥–µ–∏ –ø–æ —Ñ–∏–¥–±–µ–∫—É, –ø—Ä–µ–¥–ª–∞–≥–∞—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è.

{self.theme_knowledge}

–ü–†–ê–í–ò–õ–ê –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø TELEGRAM:
{formatting_rules}

–ï—Å–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—à—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –í–°–ï–ì–î–ê —Ä–∞–∑–¥–µ–ª—è–π—Ç–µ –∏—Ö —Å –ø–æ–º–æ—â—å—é ---
–ù–µ –≤–∫–ª—é—á–∞–π—Ç–µ –Ω–∏–∫–∞–∫–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã, –Ω–æ–º–µ—Ä–∞ –∏–ª–∏ –º–µ—Ç–∫–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ '–í–∞—Ä–∏–∞–Ω—Ç X:' –∏–ª–∏ '–ü–æ—Å—Ç Y:', –≤ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã.
"""
        self.image_system_prompt = f"""–í—ã –ø–æ–º–æ—â–Ω–∏–∫, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–º –æ–ø–∏—Å–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
–ü—Ä–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—â–∞—Ç–µ–ª—å–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –µ–≥–æ –∏ –æ–ø–∏—Å—ã–≤–∞–π—Ç–µ, —á—Ç–æ –≤—ã –≤–∏–¥–∏—Ç–µ.
–ù–µ —É–ø–æ–º–∏–Ω–∞–π—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –≤—ã –º–æ–∂–µ—Ç–µ –∏ –¥–æ–ª–∂–Ω—ã –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª—é–±–æ–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
–û–ø–∏—à–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, —É–¥–µ–ª—è—è –≤–Ω–∏–º–∞–Ω–∏–µ –≤—Å–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–∞–º –∏ –ª—é–±–æ–º—É –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–µ–º—É —Ç–µ–∫—Å—Ç—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.

–ü–†–ê–í–ò–õ–ê –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø TELEGRAM:
{formatting_rules}

–ë—É–¥—å—Ç–µ —Ç—â–∞—Ç–µ–ª—å–Ω—ã, –Ω–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã –≤ –≤–∞—à–µ–º –æ–ø–∏—Å–∞–Ω–∏–∏.
–ù–µ –Ω—É–º–µ—Ä—É–π—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –∏ –Ω–µ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –Ω–æ–º–µ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.
–ï—Å–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–ø–∏—Å–∞–Ω–∏–π, —Ä–∞–∑–¥–µ–ª—è–π—Ç–µ –∏—Ö —Å –ø–æ–º–æ—â—å—é ---
–ù–µ –≤–∫–ª—é—á–∞–π—Ç–µ –Ω–∏–∫–∞–∫–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã, –Ω–æ–º–µ—Ä–∞ –∏–ª–∏ –º–µ—Ç–∫–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ '–í–∞—Ä–∏–∞–Ω—Ç X:' –∏–ª–∏ '–ü–æ—Å—Ç Y:', –≤ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã.
"""
        self.user_states = defaultdict(lambda: {
            'mode': 'write',
            'state': 'IDLE',
            'prompt': None,
            'image_path': None,
            'type': None,
            'number': None,
            'last_posts': [],
        })
        self.chat_histories = {}
        self.user_models = {}
        self.chat_history_expiry = 5
        self.max_history_size = 5
        self.chat_log_dir = os.path.join(base_dir, 'chat_logs')
        self.temp_dir = os.path.join(base_dir, 'temp')
        os.makedirs(self.chat_log_dir, exist_ok=True)
        os.makedirs(self.temp_dir, exist_ok=True)
        self.default_model = 'gemini-2.0-flash'
        self.gemini_client = None
        self.cache = {}
        self.image_queue = asyncio.Queue(maxsize=10)

        self._load_chat_histories()

        try:
            genai.configure(api_key=GOOGLE_API_KEY)
            self.gemini_client = genai
            logger.info("–ö–ª–∏–µ–Ω—Ç Gemini —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ Gemini: {e}")
        logger.info("–ë–æ—Ç VNVNC —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def _load_theme_knowledge(self) -> str:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∑–Ω–∞–Ω–∏–π –æ —Ç–µ–º–∞—Ö –∏–∑ —Ñ–∞–π–ª–∞"""
        theme_knowledge_path = os.path.join(base_dir, 'theme_knowledge.txt')
        try:
            with open(theme_knowledge_path, 'r', encoding='utf-8') as file:
                knowledge = file.read()
                logger.info(f"Theme knowledge –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ {theme_knowledge_path}")
                return knowledge
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ theme knowledge: {e}")
            return ""  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

    async def _cleanup_temp_files(self):
        while True:
            try:
                for file_entry in os.listdir(self.temp_dir):
                    file_path = os.path.join(self.temp_dir, file_entry)
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                    if os.path.isdir(file_path):
                        logger.info(f"–ü—Ä–æ–ø—É—Å–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {file_path}")
                        continue
                    try:
                        if os.path.getctime(file_path) < time.time() - 3600:
                            os.remove(file_path)
                            logger.info(f"–£–¥–∞–ª–µ–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ñ–∞–π–ª: {file_path}")
                    except (FileNotFoundError, PermissionError) as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {file_path}: {e}")
                await asyncio.sleep(3600)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –æ—á–∏—Å—Ç–∫–∏: {e}")
                await asyncio.sleep(3600)

    async def start(self):
        asyncio.create_task(self._cleanup_temp_files())
        await bot.polling(none_stop=True)

    def _load_voice_guide(self) -> str:
        guide_file = 'vnvnc_voice_compact.txt' if self.current_voice_guide == 'compact' else 'vnvnc_voice.txt'
        voice_guide_path = os.path.join(base_dir, 'voice_guides', guide_file)
        try:
            with open(voice_guide_path, 'r', encoding='utf-8') as file:
                guide = file.read()
                logger.info(f"–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –≥–æ–ª–æ—Å—É –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ {voice_guide_path}")
                return guide
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –ø–æ –≥–æ–ª–æ—Å—É: {e}")
            raise

    def _escape_markdown(self, text: str) -> str:
        special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
        for char in special_chars:
            text = text.replace(char, f'\\{char}')
        return text

    async def forward_to_admin(self, user_input: str, bot_response: str, user_id: int, mode: str, username: str = None):
        if user_id == ADMIN_USER_ID:
            return
        try:
            model = self.user_models.get(user_id, self.default_model)
            username_part = f' (@{username})' if username else ''
            raw_header = f"üí¨ {mode}\nüë§ User {user_id}{username_part}\nü§ñ Model: {model}\n"
            header = self._escape_markdown(raw_header)
            user_input_escaped = self._escape_markdown(user_input)
            bot_response_escaped = self._escape_markdown(bot_response)
            admin_message = f"{header}\n\nüì§ User input:\n{user_input_escaped}\n\nü§ñ Bot response:\n{bot_response_escaped}"
            await bot.send_message(ADMIN_USER_ID, admin_message, parse_mode='MarkdownV2')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –∞–¥–º–∏–Ω—É: {e}")

    async def switch_voice_guide(self) -> str:
        self.current_voice_guide = 'full' if self.current_voice_guide == 'compact' else 'compact'
        self.voice_guide = self._load_voice_guide()
        formatting_rules = r"""
- –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç: **—Ç–µ–∫—Å—Ç**
- –ö—É—Ä—Å–∏–≤: _—Ç–µ–∫—Å—Ç_
- –°—Å—ã–ª–∫–∏: [—Ç–µ–∫—Å—Ç](—Å—Å—ã–ª–∫–∞)
- –°–∏–º–≤–æ–ª—ã –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: \. \| \! \[ \] \( \) \~ \` \> \# \+ \- \= \{ \} """ + r"\\"
        self.write_system_prompt = f"""–í—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –±—Ä–µ–Ω–¥–æ–≤–æ–º—É –≥–æ–ª–æ—Å—É VNVNC. –ì–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –ø–æ—Å—Ç—ã, —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É—è —Å—Ç–∏–ª—é –±—Ä–µ–Ω–¥–∞.
–ü—Ä–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –µ–≥–æ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤.
–ù–µ —É–ø–æ–º–∏–Ω–∞–π—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –≤—ã –º–æ–∂–µ—Ç–µ –∏ –¥–æ–ª–∂–Ω—ã –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª—é–±–æ–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
–í–°–ï–ì–î–ê —Ä–∞–∑–¥–µ–ª—è–π—Ç–µ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ—Å—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é ---

{self.voice_guide}

–¢–ò–ü–´ –ü–û–°–¢–û–í:

1. –°–û–ë–´–¢–ò–ï (–∞–Ω–æ–Ω—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è):
- –°—Ç—Ä–æ–≥–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–Ω–æ–Ω—Å–∞ —Å–æ–±—ã—Ç–∏—è –∏–∑ –≥–∞–π–¥–∞
- –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –¥–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª–µ
- –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞—Ç—å üé´ –ë–∏–ª–µ—Ç—ã –æ—Ç X‚ÇΩ
- 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
- –î–µ—Ç–∞–ª–∏ –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

2. –í–û–í–õ–ï–ß–ï–ù–ò–ï (engagement):
- –ö–æ—Ä–æ—Ç–∫–∏–µ, –±—Ä–æ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
- –í–∫–ª—é—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–ª–∫–∏ —Å —ç–º–æ–¥–∂–∏
- –¶–µ–ª—å: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–∏–∑—ã–≤—ã –∫ –¥–µ–π—Å—Ç–≤–∏—é
- –≠–º–æ–¥–∂–∏ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è (üëç vs üëé) –∏–ª–∏ (1Ô∏è‚É£ vs 2Ô∏è‚É£)

3. –õ–ê–ô–í-–ê–ü–î–ï–ô–¢:
- –ö–æ—Ä–æ—Ç–∫–æ–µ –∏–ª–∏ —Å—Ä–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–π —Ä–∞–±–æ—Ç–µ –∫–ª—É–±–∞
- –ß–∞—Å—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç –≤–æ–ø—Ä–æ—Å
- –û—Ç—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –∏–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
- –ñ–∏–≤–æ–π, –¥–∏–Ω–∞–º–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
- –£–º–µ—Å—Ç–Ω—ã–µ —ç–º–æ–¥–∂–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

4. –û–ë–©–ò–ô –¢–ï–ö–°–¢:
- –§–æ—Ä–º–∞–ª—å–Ω—ã–π –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
- –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å–∞–π—Ç–∞ –∏–ª–∏ –æ–±—â–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
- –°—Ç—Ä–æ–≥–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
- –ú–∏–Ω–∏–º—É–º —ç–º–æ–¥–∂–∏
- –ß–µ—Ç–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤

–î–û–°–¢–£–ü–ù–û–ï –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —è–≤–Ω–æ –∑–∞–ø—Ä–æ—à–µ–Ω–æ –∏–ª–∏ —É–º–µ—Å—Ç–Ω–æ –¥–ª—è —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞):
{formatting_rules}

–ì–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –ø–æ—Å—Ç—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–º —Ç–∏–ø–æ–º –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º.
–ü—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–æ–ª–µ–µ 2 –ø–æ—Å—Ç–æ–≤ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏—Ö —Å —É–≤–µ–ª–∏—á–∏–≤–∞—é—â–µ–π—Å—è –¥–ª–∏–Ω–æ–π: –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç —Å–∞–º—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π, –∫–∞–∂–¥—ã–π –ø–æ—Å–ª–µ–¥—É—é—â–∏–π –¥–ª–∏–Ω–Ω–µ–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ, –¥–æ –º–∞–∫—Å–∏–º—É–º–∞ –æ–∫–æ–ª–æ 400 —Å–∏–º–≤–æ–ª–æ–≤.
–ù–µ –≤–∫–ª—é—á–∞–π—Ç–µ –Ω–∏–∫–∞–∫–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã, –Ω–æ–º–µ—Ä–∞ –∏–ª–∏ –º–µ—Ç–∫–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ '–í–∞—Ä–∏–∞–Ω—Ç X:' –∏–ª–∏ '–ü–æ—Å—Ç Y:', –≤ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã.
"""
        self.chat_system_prompt = f"""–í—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –±—Ä–µ–Ω–¥–æ–≤–æ–º—É –≥–æ–ª–æ—Å—É –∏ –≥–∏–¥ VNVNC. –í–∞—à–∞ —Ä–æ–ª—å –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–º:
1. –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Å—Ç–∏–ª–µ –∏ —Ç–æ–Ω–µ –±—Ä–µ–Ω–¥–∞ VNVNC
2. –û—Ü–µ–Ω–∏–≤–∞—Ç—å –∏ —É–ª—É—á—à–∞—Ç—å —Ç–µ–∫—Å—Ç—ã, —á—Ç–æ–±—ã –æ–Ω–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ –≥–æ–ª–æ—Å—É –±—Ä–µ–Ω–¥–∞
3. –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–¥–µ–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –±—Ä–µ–Ω–¥—É
4. –ü–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ–Ω–∏–º–∞—Ç—å –∏ –ø—Ä–∏–º–µ–Ω—è—Ç—å —Ä—É–∫–æ–≤–æ–¥—è—â–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –±—Ä–µ–Ω–¥–æ–≤–æ–≥–æ –≥–æ–ª–æ—Å–∞
5. –ü—Ä–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Ö —á–µ—Ä–µ–∑ –ø—Ä–∏–∑–º—É –±—Ä–µ–Ω–¥–∞ VNVNC

{self.voice_guide}

–ü–†–ê–í–ò–õ–ê –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø TELEGRAM:
{formatting_rules}

–ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –≤—Å–µ–≥–¥–∞ –Ω—É–∂–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ç–æ–Ω –±—Ä–µ–Ω–¥–∞ –≤ –≤–∞—à–∏—Ö —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞—Ö, –ø–æ–º–æ–≥–∞—è –¥—Ä—É–≥–∏–º –¥–æ—Å—Ç–∏—á—å —ç—Ç–æ–≥–æ.
–ï—Å–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –í–°–ï–ì–î–ê —Ä–∞–∑–¥–µ–ª—è–π—Ç–µ –∏—Ö —Å –ø–æ–º–æ—â—å—é ---
–ù–µ –≤–∫–ª—é—á–∞–π—Ç–µ –Ω–∏–∫–∞–∫–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã, –Ω–æ–º–µ—Ä–∞ –∏–ª–∏ –º–µ—Ç–∫–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ '–í–∞—Ä–∏–∞–Ω—Ç X:' –∏–ª–∏ '–ü–æ—Å—Ç Y:', –≤ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã.
"""
        return "–ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç" if self.current_voice_guide == 'full' else "–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç"

    async def _generate_response(self, system_prompt: str, user_input: Union[str, Dict], model: Dict, chat_context: List[Dict] = None) -> str:
        try:
            if chat_context is None:
                chat_context = []
            logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º {model['provider']}")
            if model['provider'] == 'Gemini':
                if not self.gemini_client:
                    logger.warning("–ö–ª–∏–µ–Ω—Ç Gemini –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ OpenAI")
                    model = AVAILABLE_MODELS['chatgpt-4o-latest']
                    return await self._generate_openai_response(system_prompt, user_input, model, chat_context)
                return await self._generate_gemini_response(system_prompt, user_input, model, chat_context)
            else:
                return await self._generate_openai_response(system_prompt, user_input, model, chat_context)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}", exc_info=True)
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞."

    async def _generate_openai_response(self, system_prompt: str, user_input: Union[str, Dict], model: Dict, chat_context: List[Dict]) -> str:
        try:
            logger.info("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ OpenAI")
            messages = [{"role": "system", "content": system_prompt}] + [
                {"role": "assistant" if msg["role"] == "bot" else msg["role"], "content": msg["content"]}
                for msg in chat_context
            ]
            if isinstance(user_input, dict) and 'image' in user_input:
                logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å OpenAI")
                messages.append({
                    "role": "user",
                    "content": [
                        {"type": "text", "text": user_input['text']},
                        {
                            "type": "image_url",
                            "image_url": {"url": f"data:image/jpeg;base64,{user_input['image']}"}
                        }
                    ]
                })
            else:
                messages.append({"role": "user", "content": user_input})
            response = await client.chat.completions.create(
                model=model['id'],
                messages=messages,
                max_tokens=2000
            )
            return response.choices[0].message.content
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ OpenAI: {e}", exc_info=True)
            raise

    async def _generate_gemini_response(self, system_prompt: str, user_input: Union[str, Dict], model: Dict, chat_context: List[Dict]) -> str:
        try:
            logger.info("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ Gemini")
            gemini_model = self.gemini_client.GenerativeModel(model['id'])
            formatting_reminder = """–í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —ç—Ç–æ —è–≤–Ω–æ –∑–∞–ø—Ä–æ—à–µ–Ω–æ –∏–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.

–î–û–°–¢–£–ü–ù–û–ï –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï:
1. –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç (**—Ç–µ–∫—Å—Ç**):
   - –î–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –≤—ã–¥–µ–ª–∏—Ç—å)
   - –î–ª—è –≤–∞–∂–Ω—ã—Ö –¥–∞—Ç –∏ –≤—Ä–µ–º–µ–Ω–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∞–∫—Ü–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å)
   - –î–ª—è —Ü–µ–Ω (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å)

2. –ö—É—Ä—Å–∏–≤ (_—Ç–µ–∫—Å—Ç_):
   - –î–ª—è —Ü–∏—Ç–∞—Ç
   - –î–ª—è –æ—Å–æ–±—ã—Ö –∞–∫—Ü–µ–Ω—Ç–æ–≤
   - –î–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π

3. –°—Å—ã–ª–∫–∏ ([—Ç–µ–∫—Å—Ç](—Å—Å—ã–ª–∫–∞)):
   - –î–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
   - –î–ª—è –±–∏–ª–µ—Ç–æ–≤ (–≤ –∞–Ω–æ–Ω—Å–∞—Ö —Å–æ–±—ã—Ç–∏–π)
   - –î–ª—è –º–µ–Ω—é (–µ—Å–ª–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ)

4. –≠–º–æ–¥–∂–∏:
   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–º–µ—Ä–µ–Ω–Ω–æ
   - –ü–æ–¥–±–∏—Ä–∞—Ç—å –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
   - –î–ª—è —Å–æ–±—ã—Ç–∏–π: üéâ üéµ üéä
   - –î–ª—è –±–∞—Ä–æ–≤: üç∏ üçπ üç∑
   - –î–ª—è —Ç–∞–Ω—Ü–µ–≤: üíÉ üï∫ ‚ö°Ô∏è

–ù–ï –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —ç—Ç–æ —è–≤–Ω–æ –∑–∞–ø—Ä–æ—à–µ–Ω–æ –∏–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
            if isinstance(user_input, dict) and 'image' in user_input:
                logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å Gemini")
                content = [{
                    "parts": [
                        {"text": system_prompt + "\n\n" + formatting_reminder},
                        {"inline_data": {"mime_type": "image/jpeg", "data": user_input['image']}},
                        {"text": user_input['text']}
                    ]
                }]
            else:
                messages = [system_prompt + "\n\n" + formatting_reminder] + [f"{msg['role']}: {msg['content']}" for msg in chat_context]
                messages.append(user_input)
                content = messages
            logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini")
            response = await gemini_model.generate_content_async(content)
            if not response.candidates:
                logger.warning("–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini, –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ OpenAI")
                return await self._generate_openai_response(system_prompt, user_input, AVAILABLE_MODELS['chatgpt-4o-latest'], chat_context)
            text = response.text
            bold_count = text.count('**') // 2
            italic_count = text.count('_') // 2
            link_count = len(re.findall(r'\[([^\]]+)\]\(([^\)]+)\)', text))
            logger.info(f"–ò—Å—Ö–æ–¥–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –∂–∏—Ä–Ω—ã–π - {bold_count}, –∫—É—Ä—Å–∏–≤ - {italic_count}, —Å—Å—ã–ª–∫–∏ - {link_count}")
            if bold_count == 0 and italic_count == 0:
                logger.warning("–û—Ç–≤–µ—Ç Gemini –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤–æ–µ")
                original_text = text
                text = re.sub(r'([–ê-–ØA-Z][–ê-–ØA-Z\s]+(?=[^\n]{2,}))', r'**\1**', text)
                headers_added = (text.count('**') - original_text.count('**')) // 2
                text = re.sub(r'(\d{2}\.\d{2}(?:\.\d{4})?)', r'**\1**', text)
                dates_added = (text.count('**') - original_text.count('**') - headers_added * 2) // 2
                text = re.sub(r'(\d{2}:\d{2}(?:-\d{2}:\d{2})?)', r'**\1**', text)
                times_added = (text.count('**') - original_text.count('**') - headers_added * 2 - dates_added * 2) // 2
                text = re.sub(r'((?<=\n)[–ê-–ØA-Z][^\.!?\n]{10,}[\.!?])', r'_\1_', text)
                sentences_added = (text.count('_') - original_text.count('_')) // 2
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ - {headers_added}, –¥–∞—Ç - {dates_added}, –≤—Ä–µ–º–µ–Ω–∏ - {times_added}, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π - {sentences_added}")
            return text
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ Gemini: {e}", exc_info=True)
            logger.warning("–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ OpenAI –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ Gemini")
            return await self._generate_openai_response(system_prompt, user_input, AVAILABLE_MODELS['chatgpt-4o-latest'], chat_context)

    def _load_chat_histories(self):
        for filename in os.listdir(self.chat_log_dir):
            if filename.endswith('.json'):
                try:
                    user_id = int(filename.split('_')[1].replace('.json', ''))
                    filepath = os.path.join(self.chat_log_dir, filename)
                    with open(filepath, 'r', encoding='utf-8') as f:
                        self.chat_histories[user_id] = json.load(f)
                except (IndexError, ValueError) as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –∏–∑ {filename}: {e}")
                    continue

    def _save_to_history(self, user_id: int, user_text: str, bot_response: str, model_id: str):
        self.chat_histories.setdefault(user_id, []).append({
            'role': 'user', 'content': user_text, 'timestamp': datetime.now().isoformat(), 'model': model_id
        })
        self.chat_histories[user_id].append({
            'role': 'bot', 'content': bot_response, 'timestamp': datetime.now().isoformat(), 'model': model_id
        })
        asyncio.create_task(self._save_chat_history(user_id))

    async def _save_chat_history(self, user_id: int):
        async with aiofiles.open(os.path.join(self.chat_log_dir, f"chat_{user_id}.json"), 'w', encoding='utf-8') as f:
            await f.write(json.dumps(self.chat_histories[user_id], ensure_ascii=False, indent=2))
        self._cleanup_old_history(user_id)

    def _cleanup_old_history(self, user_id: int):
        now = datetime.now()
        self.chat_histories[user_id] = [
            msg for msg in self.chat_histories[user_id]
            if now - datetime.fromisoformat(msg['timestamp']) <= timedelta(minutes=self.chat_history_expiry)
        ][:self.max_history_size]

    def _get_recent_chat_history(self, user_id: int) -> List[Dict]:
        if user_id not in self.chat_histories:
            self.chat_histories[user_id] = []
        self._cleanup_old_history(user_id)
        return self.chat_histories[user_id][-self.max_history_size:]

    def get_user_model(self, user_id: int) -> Dict:
        model_key = self.user_models.get(user_id, self.default_model)
        return AVAILABLE_MODELS[model_key]

    async def switch_model(self, user_id: int, model_key: str) -> (bool, str):
        if model_key not in AVAILABLE_MODELS:
            return False, "–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
        if AVAILABLE_MODELS[model_key]['provider'] == 'Gemini' and not self.gemini_client:
            return False, "Gemini –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ OpenAI."
        self.user_models[user_id] = model_key
        return True, f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ {model_key}"

    async def handle_text(self, message):
        user_id = message.from_user.id
        user_state = self.user_states[user_id]
        typing_task = asyncio.create_task(self._keep_typing(message.chat.id))
        try:
            if user_state['mode'] == 'chat':
                chat_context = self._get_recent_chat_history(user_id)
                user_input = message.text
                response = await self._generate_response(self.chat_system_prompt, user_input, self.get_user_model(user_id), chat_context)
                await self.forward_to_admin(
                    user_input=message.text,
                    bot_response=response,
                    user_id=user_id,
                    mode="CHAT MODE",
                    username=message.from_user.username
                )
                self._save_to_history(user_id, message.text, response, self.user_models.get(user_id, self.default_model))
                await self.split_and_send_messages(message.chat.id, response, self.user_models.get(user_id, self.default_model))
            elif user_state['mode'] == 'theme':
                chat_context = self._get_recent_chat_history(user_id)
                user_input = message.text
                response = await self._generate_response(self.theme_system_prompt, user_input, self.get_user_model(user_id), chat_context)
                await self.forward_to_admin(
                    user_input=message.text,
                    bot_response=response,
                    user_id=user_id,
                    mode="THEME MODE",
                    username=message.from_user.username
                )
                self._save_to_history(user_id, message.text, response, self.user_models.get(user_id, self.default_model))
                await self.split_and_send_messages(message.chat.id, response, self.user_models.get(user_id, self.default_model))
            elif user_state['mode'] == 'write':
                if user_state['state'] == 'IDLE':
                    user_state['prompt'] = message.text
                    user_state['state'] = 'WAITING_FOR_TYPE'
                    await self.send_type_selection(message.chat.id)
                else:
                    await bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å.")
        finally:
            typing_task.cancel()
            try:
                await typing_task
            except asyncio.CancelledError:
                pass

    async def send_type_selection(self, chat_id):
        model_id = self.user_models.get(chat_id, self.default_model)
        model_indicator = "[GPT]" if "gpt" in model_id.lower() else "[Gemini]"
        markup = InlineKeyboardMarkup()
        markup.row(
            InlineKeyboardButton("üéâ –°–æ–±—ã—Ç–∏–µ", callback_data="type_event"),
            InlineKeyboardButton("üí¨ –í–æ–≤–ª–µ—á–µ–Ω–∏–µ", callback_data="type_engagement")
        )
        markup.row(
            InlineKeyboardButton("üì¢ –õ–∞–π–≤-–∞–ø–¥–µ–π—Ç", callback_data="type_live"),
            InlineKeyboardButton("üìù –û–±—â–∏–π —Ç–µ–∫—Å—Ç", callback_data="type_general")
        )
        markup.row(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))
        await bot.send_message(chat_id, f"{model_indicator} –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ—Å—Ç–∞:", reply_markup=markup)

    async def send_number_selection(self, chat_id):
        markup = InlineKeyboardMarkup()
        markup.row(
            InlineKeyboardButton("1", callback_data="number_1"),
            InlineKeyboardButton("2", callback_data="number_2"),
            InlineKeyboardButton("3", callback_data="number_3"),
            InlineKeyboardButton("4", callback_data="number_4")
        )
        markup.row(
            InlineKeyboardButton("5", callback_data="number_5"),
            InlineKeyboardButton("6", callback_data="number_6"),
            InlineKeyboardButton("7", callback_data="number_7"),
            InlineKeyboardButton("8", callback_data="number_8")
        )
        markup.row(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))
        await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤:", reply_markup=markup)

    async def send_post_with_refinement_buttons(self, chat_id, post, index):
        markup = InlineKeyboardMarkup()
        markup.row(
            InlineKeyboardButton("üîÑ Remix", callback_data=f"rewrite_{index}"),
            InlineKeyboardButton("‚ûï –†–∞—Å—à–∏—Ä–∏—Ç—å", callback_data=f"expand_{index}"),
            InlineKeyboardButton("‚ûñ –°–æ–∫—Ä–∞—Ç–∏—Ç—å", callback_data=f"shorten_{index}")
        )
        formatted_post = self.format_for_telegram(post)
        await bot.send_message(chat_id, formatted_post, reply_markup=markup, parse_mode='MarkdownV2')

    async def handle_photo(self, message):
        user_id = message.from_user.id
        user_state = self.user_states[user_id]
        temp_file_path = None
        if user_state['mode'] == 'write' and user_state['state'] != 'IDLE':
            await bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            return
        typing_task = asyncio.create_task(self._keep_typing(message.chat.id))
        try:
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            file_id = message.photo[-1].file_id
            file_info = await bot.get_file(file_id)
            timestamp = int(time.time())
            temp_file_path = os.path.join(self.temp_dir, f"photo_{user_id}_{timestamp}_{file_id}.jpg")
            downloaded_file = await bot.download_file(file_info.file_path)
            with open(temp_file_path, 'wb') as f:
                f.write(downloaded_file)
            logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {temp_file_path}")
            if not os.path.exists(temp_file_path) or os.path.getsize(temp_file_path) == 0:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç")
            if user_state.get('image_path') and os.path.exists(user_state['image_path']):
                try:
                    os.remove(user_state['image_path'])
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            user_state['image_path'] = temp_file_path
            if user_state['mode'] in ['chat', 'theme']:
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ —Ä–µ–∂–∏–º–µ {user_state['mode']}")
                try:
                    with open(temp_file_path, 'rb') as img_file:
                        base64_image = base64.b64encode(img_file.read()).decode('utf-8')
                    instruction = ("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –±—Ä–µ–Ω–¥–∞ –í–∏–Ω–æ–≤–Ω–∏—Ü—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–¥–µ–π –¥–ª—è –ø–æ—Å—Ç–æ–≤ –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö." if user_state['mode'] == 'chat'
                                   else "–ò–∑—É—á–∏—Ç–µ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –∏–¥–µ–∏ –¥–ª—è —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤–µ—á–µ—Ä–∏–Ω–æ–∫ –∏ –¥–µ–∫–æ—Ä–∞—Ü–∏–π, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º.")
                    user_input = {
                        'text': instruction + (f" –¢–µ–∫—Å—Ç –ø–æ–¥–ø–∏—Å–∏: {message.caption}" if message.caption else ""),
                        'image': base64_image
                    }
                    system_prompt = self.chat_system_prompt if user_state['mode'] == 'chat' else self.theme_system_prompt
                    chat_context = self._get_recent_chat_history(user_id)
                    response = await self._generate_response(system_prompt, user_input, self.get_user_model(user_id), chat_context)
                    user_input_str = "[Image sent]" + (f" with caption: {message.caption}" if message.caption else "")
                    await self.forward_to_admin(
                        user_input=user_input_str,
                        bot_response=response,
                        user_id=user_id,
                        mode="CHAT MODE" if user_state['mode'] == 'chat' else "THEME MODE",
                        username=message.from_user.username
                    )
                    self._save_to_history(user_id, "[–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ] " + (message.caption or ""), response, self.user_models.get(user_id, self.default_model))
                    await self.split_and_send_messages(message.chat.id, response, self.user_models.get(user_id, self.default_model))
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ {user_state['mode']}: {e}", exc_info=True)
                    await bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ {user_state['mode']}.")
            elif user_state['mode'] == 'write':
                user_state['prompt'] = message.caption or ""
                user_state['state'] = 'WAITING_FOR_IMAGE_ACTION'
                await self.send_image_action_selection(message.chat.id)
        except Exception as e:
            logger.error(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ handle_photo: {e}", exc_info=True)
            await bot.send_message(message.chat.id, "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            if temp_file_path and os.path.exists(temp_file_path):
                try:
                    os.remove(temp_file_path)
                    user_state['image_path'] = None
                except Exception as cleanup_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {cleanup_error}")
        finally:
            user_state['state'] = 'IDLE'
            typing_task.cancel()
            try:
                await typing_task
            except asyncio.CancelledError:
                pass

    async def send_image_action_selection(self, chat_id):
        model_id = self.user_models.get(chat_id, self.default_model)
        model_indicator = "[GPT]" if "gpt" in model_id.lower() else "[Gemini]"
        markup = InlineKeyboardMarkup()
        markup.row(
            InlineKeyboardButton("üìù –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ—Å—Ç—ã", callback_data="image_write"),
            InlineKeyboardButton("üîç –û–ø–∏—Å–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="image_describe")
        )
        markup.row(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))
        await bot.send_message(chat_id, f"{model_indicator} –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º?", reply_markup=markup)

    async def send_menu(self, chat_id):
        markup = InlineKeyboardMarkup()
        markup.row(
            InlineKeyboardButton("üìù Write Mode", callback_data="mode_write"),
            InlineKeyboardButton("üí¨ Chat Mode", callback_data="mode_chat")
        )
        markup.row(InlineKeyboardButton("ü§ñ –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å", callback_data="model_settings"))
        markup.row(InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è", callback_data="history_settings"))
        context_button_text = "ü´° –ú–µ–Ω—å—à–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞" if self.current_voice_guide == 'full' else "‚ö°Ô∏è –ë–æ–ª—å—à–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
        markup.row(InlineKeyboardButton(context_button_text, callback_data="switch_context"))
        markup.row(InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help"))
        user_id = await self._get_user_id_from_chat_id(chat_id)
        if auth_manager.has_theme_mode_access(user_id):
            markup.row(InlineKeyboardButton("üé® Theme Mode", callback_data="mode_theme"))
        if user_id == ADMIN_USER_ID:
            markup.row(InlineKeyboardButton("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_menu"))
        await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=markup)

    async def _get_user_id_from_chat_id(self, chat_id):
        try:
            return chat_id
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è user_id –∏–∑ chat_id: {e}")
            return None

    def protect_markdown(self, text):
        logger.info(f"–ó–∞—â–∏—Ç–∞ markdown –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –¥–ª–∏–Ω–æ–π {len(text)}")
        code_blocks_count = len(re.findall(r'```(\w+)?\n(.*?)\n```', text, flags=re.DOTALL))
        text = re.sub(r'```(\w+)?\n(.*?)\n```', lambda m: f'¬ßCODE¬ß{m.group(1) or ""}\n{m.group(2)}¬ßCODE¬ß', text, flags=re.DOTALL)
        logger.info(f"–ó–∞—â–∏—â–µ–Ω–æ {code_blocks_count} –∫–æ–¥–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤")
        inline_code_count = len(re.findall(r'`([^`]+)`', text))
        text = re.sub(r'`([^`]+)`', r'¬ßINLINE_CODE¬ß\1¬ßINLINE_CODE¬ß', text)
        logger.info(f"–ó–∞—â–∏—â–µ–Ω–æ {inline_code_count} inline-–∫–æ–¥–æ–≤")
        bold_count = len(re.findall(r'\*\*([^*]+)\*\*', text))
        text = re.sub(r'\*\*([^*]+)\*\*', r'¬ßBOLD¬ß\1¬ßBOLD¬ß', text)
        logger.info(f"–ó–∞—â–∏—â–µ–Ω–æ {bold_count} –∂–∏—Ä–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤")
        italic_count = len(re.findall(r'\_([^_]+)\_', text))
        text = re.sub(r'\_([^_]+)\_', r'¬ßITALIC¬ß\1¬ßITALIC¬ß', text)
        logger.info(f"–ó–∞—â–∏—â–µ–Ω–æ {italic_count} –∫—É—Ä—Å–∏–≤–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤")
        links_count = len(re.findall(r'\[([^\]]+)\]\(([^\)]+)\)', text))
        text = re.sub(r'\[([^\]]+)\]\(([^\)]+)\)', r'¬ßLINK¬ß\1¬ßURL¬ß\2¬ßLINK¬ß', text)
        logger.info(f"–ó–∞—â–∏—â–µ–Ω–æ {links_count} —Å—Å—ã–ª–æ–∫")
        return text

    def unprotect_markdown(self, text):
        logger.info("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ markdown")
        code_blocks_count = len(re.findall(r'¬ßCODE¬ß(\w*)\n(.*?)¬ßCODE¬ß', text, flags=re.DOTALL))
        text = re.sub(r'¬ßCODE¬ß(\w*)\n(.*?)¬ßCODE¬ß',
                     lambda m: f"```{m.group(1)}\n{m.group(2)}\n```",
                     text, flags=re.DOTALL)
        logger.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {code_blocks_count} –∫–æ–¥–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤")
        inline_code_count = text.count('¬ßINLINE_CODE¬ß') // 2
        text = text.replace('¬ßINLINE_CODE¬ß', '`')
        logger.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {inline_code_count} inline-–∫–æ–¥–æ–≤")
        bold_count = text.count('¬ßBOLD¬ß') // 2
        text = text.replace('¬ßBOLD¬ß', '*')
        logger.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {bold_count} –∂–∏—Ä–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤")
        italic_count = text.count('¬ßITALIC¬ß') // 2
        text = text.replace('¬ßITALIC¬ß', '_')
        logger.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {italic_count} –∫—É—Ä—Å–∏–≤–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤")
        links_count = len(re.findall(r'¬ßLINK¬ß([^¬ß]+)¬ßURL¬ß([^¬ß]+)¬ßLINK¬ß', text))
        text = re.sub(r'¬ßLINK¬ß([^¬ß]+)¬ßURL¬ß([^¬ß]+)¬ßLINK¬ß', r'[\1](\2)', text)
        logger.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {links_count} —Å—Å—ã–ª–æ–∫")
        return text

    def format_for_telegram(self, text: str) -> str:
        if not text:
            logger.warning("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
        logger.info(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Telegram —Ç–µ–∫—Å—Ç–∞ –¥–ª–∏–Ω–æ–π {len(text)}")
        text = re.sub(r'^variation \d+ - .*?\n', '', text, flags=re.MULTILINE)
        bullet_count = len(re.findall(r'^\s*[\-\*]\s+', text, flags=re.MULTILINE))
        text = re.sub(r'^\s*[\-\*]\s+', '‚Ä¢ ', text, flags=re.MULTILINE)
        logger.info(f"–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ {bullet_count} –º–∞—Ä–∫–µ—Ä–æ–≤")
        ticket_emoji_count = text.count('üé´')
        text = re.sub(r'([^\n])\n*üé´', r'\1\n\n\nüé´', text)
        logger.info(f"–û—Ç—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è {ticket_emoji_count} —ç–º–æ–¥–∑–∏ –±–∏–ª–µ—Ç–æ–≤")
        text = self.protect_markdown(text)
        special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
        lines = text.split('\n')
        processed_lines = []
        total_escapes = 0
        for line in lines:
            if not line.startswith('```') and not line.endswith('```'):
                original_line = line
                for char in special_chars:
                    char_count = line.count(char)
                    line = line.replace(char, fr'\{char}')
                    total_escapes += char_count
            processed_lines.append(line)
        text = '\n'.join(processed_lines)
        logger.info(f"–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ {total_escapes} —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤")
        text = self.unprotect_markdown(text)
        text = text.replace('\r\n', '\n').replace('\r', '\n')
        original_paragraphs = len(text.split('\n\n'))
        paragraphs = [p.strip() for p in text.split('\n\n') if p.strip()]
        text = '\n\n'.join(paragraphs)
        logger.info(f"–°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è {len(paragraphs)} –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ (—É–¥–∞–ª–µ–Ω–æ {original_paragraphs - len(paragraphs)} –ø—É—Å—Ç—ã—Ö)")
        double_escape_count = len(re.findall(r'\\\\([_*\[\]()~`>#+=|{}.!])', text))
        text = re.sub(r'\\\\([_*\[\]()~`>#+=|{}.!])', r'\\\1', text)
        logger.info(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {double_escape_count} –¥–≤–æ–π–Ω—ã—Ö —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
        return text

    async def split_and_send_messages(self, chat_id, text: str, model_id: str, reply_markup=None):
        try:
            logger.info("–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π")
            messages = [msg.strip() for msg in text.split('---') if msg.strip()]
            for i, message in enumerate(messages):
                await bot.send_chat_action(chat_id, 'typing')
                formatted_message = self.format_for_telegram(message)
                logger.info(f"–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{formatted_message}")
                message_parts = [formatted_message[i:i+4000] for i in range(0, len(formatted_message), 4000)]
                for part_idx, part in enumerate(message_parts):
                    current_markup = reply_markup if (i == len(messages) - 1 and part_idx == len(message_parts) - 1) else None
                    try:
                        logger.info("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å –ø–æ–ª–Ω—ã–º markdown")
                        await bot.send_message(chat_id, part, parse_mode='MarkdownV2', reply_markup=current_markup)
                    except Exception as e:
                        logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å markdown: {e}")
                        try:
                            logger.info("–ü–æ–ø—ã—Ç–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
                            escaped_part = part
                            for char in ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']:
                                escaped_part = escaped_part.replace(char, f'\\{char}')
                            await bot.send_message(chat_id, escaped_part, parse_mode='MarkdownV2', reply_markup=current_markup)
                        except Exception as e2:
                            logger.error(f"–û—à–∏–±–∫–∞ —Å –±–∞–∑–æ–≤—ã–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º: {e2}")
                            try:
                                logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç")
                                await bot.send_message(chat_id, part.replace('\\', ''), reply_markup=current_markup)
                            except Exception as e3:
                                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞: {e3}")
                                await bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
                    if part_idx < len(message_parts) - 1:
                        await asyncio.sleep(0.3)
                if i < len(messages) - 1:
                    await asyncio.sleep(0.5)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ split_and_send_messages: {e}", exc_info=True)
            await bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π")
        finally:
            user_id = chat_id
            user_state = self.user_states[user_id]
            if user_state.get('image_path') and os.path.exists(user_state['image_path']):
                try:
                    os.remove(user_state['image_path'])
                    user_state['image_path'] = None
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

    async def _keep_typing(self, chat_id):
        try:
            while True:
                await bot.send_chat_action(chat_id, 'typing')
                await asyncio.sleep(3)
        except asyncio.CancelledError:
            pass

bot_instance = VNVNCBot()

@bot.message_handler(commands=['start'])
@auth_required
async def start(message):
    start_message = """üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç VNVNC, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –ø–æ–º–æ—â–∏ –≤ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤ –≤ —Å—Ç–∏–ª–µ –±—Ä–µ–Ω–¥–∞. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:
- üìù Write Mode: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ—Å—Ç–æ–≤ –ø–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–º –∏ —Ñ–æ—Ç–æ –∑–∞–ø—Ä–æ—Å–∞–º (–º–æ–∂–Ω–æ –≤–º–µ—Å—Ç–µ). –ö–Ω–æ–ø–∫–∏ Remix/–†–∞—Å—à–∏—Ä–∏—Ç—å/–°–æ–∫—Ä–∞—Ç–∏—Ç—å –ø–æ–∑–≤–æ–ª—è—é—Ç –ª–µ–≥–∫–æ —É–ª—É—á—à–∞—Ç—å —Ç–µ–∫—Å—Ç—ã.
- üí¨ Chat Mode: —Å–≤–æ–±–æ–¥–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ —Ñ–∏—Ä—Å—Ç–∏–ª—é –∏ –∏–¥–µ—è–º (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞—Ñ–∏—à–∏ –∏ —Ñ–æ—Ç–æ).
- üé® Theme Mode: —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤–µ—á–µ—Ä–∏–Ω–æ–∫ (–¥–æ—Å—Ç—É–ø–Ω–æ, –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–ΩÔøΩÔøΩ –∞–¥–º–∏–Ω–æ–º).
- üîß –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å: –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É Gemini (–æ—Å–Ω–æ–≤–Ω–∞—è, –¥–µ—à–µ–≤–∞—è –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è) –∏ GPT (–∑–∞–ø–∞—Å–Ω–∞—è, –¥–æ—Ä–æ–≥–∞—è, –Ω–æ –ø–æ —Å—É—Ç–∏ —Ç–∞–∫–∞—è –∂–µ)
- ‚ÑπÔ∏è –ò—Å—Ç–æ—Ä–∏—è: —É–º–µ–Ω—å—à–µ–Ω–∏–µ –∏–ª–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–∞ —Å–ª—É—á–∞–π –≥–ª—é–∫–æ–≤ –º–æ–∂–Ω–æ —É–º–µ–Ω—å—à–∏—Ç—å –∏–ª–∏ —Å—Ç–µ—Ä–µ—Ç—å).
- ü´° –ö–æ–Ω—Ç–µ–∫—Å—Ç: –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –ø–æ–ª–Ω—ã–º –∏ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–º –≥–∞–π–¥–æ–º (–±–æ–ª—å—à–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ = —Ç–æ—á–Ω–µ–µ —Å—Ç–∏–ª—å, –Ω–æ –º–æ–≥—É—Ç –±—ã—Ç—å –≥–ª—é–∫–∏)
- ‚ÑπÔ∏è –ü–æ–º–æ—â—å: –ø–∞–º—è—Ç–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –∏ —Ñ—É–Ω–∫—Ü–∏—è–º.

–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –±—Ä–∞—Ç—å –∑–∞ –æ—Å–Ω–æ–≤—É –ø–æ—Å—Ç–∞ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—à–µ–ª —Ö–æ—Ç—è –±—ã –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç—Ç–∞–ø–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–±–æ—Ä–∞.

–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω Write Mode. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"""
    await bot.send_message(message.chat.id, start_message, parse_mode='Markdown')

@bot.message_handler(func=lambda message: not auth_manager.is_authorized(message.from_user.id) and not message.text.startswith('/'))
async def unauthorized_message_handler(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    username = message.from_user.username
    potential_code = message.text.strip()
    if len(potential_code) > 3 and not potential_code.startswith('/'):
        if auth_manager.verify_access_code(user_id, potential_code):
            await bot.send_message(chat_id, "‚úÖ –ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–∏–Ω—è—Ç! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É.")
            admin_msg = f"üîê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {'@' + username if username else user_id} –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –∫–æ–¥: {potential_code}"
            await bot.send_message(ADMIN_USER_ID, admin_msg)
            await start(message)
            return
    auth_manager.start_auth_process(user_id, username)
    await send_auth_request(chat_id, user_id)

@bot.message_handler(commands=['menu'])
@auth_required
async def menu(message):
    await bot_instance.send_menu(message.chat.id)

@bot.message_handler(commands=['help'])
@auth_required
async def help_command(message):
    help_message = """üìö –ü–æ–º–æ—â—å:
- üìù Write Mode: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ—Å—Ç–æ–≤ –ø–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–º –∏ —Ñ–æ—Ç–æ –∑–∞–ø—Ä–æ—Å–∞–º (–º–æ–∂–Ω–æ –≤–º–µ—Å—Ç–µ). –ö–Ω–æ–ø–∫–∏ Remix/–†–∞—Å—à–∏—Ä–∏—Ç—å/–°–æ–∫—Ä–∞—Ç–∏—Ç—å –ø–æ–∑–≤–æ–ª—è—é—Ç –ª–µ–≥–∫–æ —É–ª—É—á—à–∞—Ç—å —Ç–µ–∫—Å—Ç—ã.
- üí¨ Chat Mode: —Å–≤–æ–±–æ–¥–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ —Ñ–∏—Ä—Å—Ç–∏–ª—é –∏ –∏–¥–µ—è–º (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞—Ñ–∏—à–∏ –∏ —Ñ–æ—Ç–æ).
- üé® Theme Mode: —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤–µ—á–µ—Ä–∏–Ω–æ–∫ (–¥–æ—Å—Ç—É–ø–Ω–æ, –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –∞–¥–º–∏–Ω–æ–º).
- üîß –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å: –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É Gemini (–æ—Å–Ω–æ–≤–Ω–∞—è, –¥–µ—à–µ–≤–∞—è –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è) –∏ GPT (–∑–∞–ø–∞—Å–Ω–∞—è, –¥–æ—Ä–æ–≥–∞—è, –Ω–æ –ø–æ —Å—É—Ç–∏ —Ç–∞–∫–∞—è –∂–µ)
- ‚ÑπÔ∏è –ò—Å—Ç–æ—Ä–∏—è: —É–º–µ–Ω—å—à–µ–Ω–∏–µ –∏–ª–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–∞ —Å–ª—É—á–∞–π –≥–ª—é–∫–æ–≤ –º–æ–∂–Ω–æ —É–º–µ–Ω—å—à–∏—Ç—å –∏–ª–∏ —Å—Ç–µ—Ä–µ—Ç—å).
- ü´° –ö–æ–Ω—Ç–µ–∫—Å—Ç: –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –ø–æ–ª–Ω—ã–º –∏ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–º –≥–∞–π–¥–æ–º (–±–æ–ª—å—à–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ = —Ç–æ—á–Ω–µ–µ —Å—Ç–∏–ª—å, –Ω–æ –º–æ–≥—É—Ç –±—ã—Ç—å –≥–ª—é–∫–∏)
- ‚ÑπÔ∏è –ü–æ–º–æ—â—å: –ø–∞–º—è—Ç–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –∏ —Ñ—É–Ω–∫—Ü–∏—è–º.

–î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: –≤—ã–±–µ—Ä–∏—Ç–µ, —Ö–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ—Å—Ç—ã –∏–ª–∏ –æ–ø–∏—Å–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.

–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –±—Ä–∞—Ç—å –∑–∞ –æ—Å–Ω–æ–≤—É –ø–æ—Å—Ç–∞ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—à–µ–ª —Ö–æ—Ç—è –±—ã –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç—Ç–∞–ø–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–±–æ—Ä–∞.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º. –¢–µ—Ö. —Å–∞–ø–ø–æ—Ä—Ç: @kirniy"""
    await bot.send_message(message.chat.id, help_message, parse_mode='Markdown')

@bot.message_handler(commands=['chat'])
@auth_required
async def chat_mode_command(message):
    user_id = message.from_user.id
    user_state = bot_instance.user_states[user_id]
    user_state['mode'] = 'chat'
    user_state['state'] = 'IDLE'
    await bot.send_message(message.chat.id, "–†–µ–∂–∏–º Chat Mode –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—â–µ–Ω–∏—è.")
    greeting_input = "Greet the user and ask how you can help with creating posts in VNVNC style."
    response = await bot_instance._generate_response(bot_instance.chat_system_prompt, greeting_input, bot_instance.get_user_model(user_id))
    await bot_instance.split_and_send_messages(message.chat.id, response, bot_instance.user_models.get(user_id, bot_instance.default_model))

@bot.message_handler(commands=['write'])
@auth_required
async def write_mode_command(message):
    user_id = message.from_user.id
    user_state = bot_instance.user_states[user_id]
    user_state['mode'] = 'write'
    user_state['state'] = 'IDLE'
    await bot.send_message(message.chat.id, "–†–µ–∂–∏–º Write Mode –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞.")

@bot.message_handler(commands=['theme'])
@auth_required
async def theme_mode_command(message):
    user_id = message.from_user.id
    if not auth_manager.has_theme_mode_access(user_id):
        await bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ Theme Mode. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    user_state = bot_instance.user_states[user_id]
    user_state['mode'] = 'theme'
    user_state['state'] = 'IDLE'
    await bot.send_message(message.chat.id, "–†–µ–∂–∏–º Theme Mode –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ü–µ–ø—Ü–∏–π –≤–µ—á–µ—Ä–∏–Ω–æ–∫.")

@bot.message_handler(commands=['clear_history'])
@auth_required
async def clear_history_command(message):
    user_id = message.from_user.id
    bot_instance.chat_histories[user_id] = []
    asyncio.create_task(bot_instance._save_chat_history(user_id))
    await bot.send_message(message.chat.id, "–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞!")

@bot.message_handler(commands=['auth_list'])
async def auth_list_command(message):
    user_id = message.from_user.id
    if user_id != ADMIN_USER_ID:
        return
    users_list = "\n".join([f"- {uid} (Theme Mode: {'‚úÖ' if auth_manager.has_theme_mode_access(uid) else '‚ùå'})" for uid in auth_manager.authorized_users])
    if not users_list:
        users_list = "–ù–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    await bot.send_message(message.chat.id, f"–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n{users_list}")

@bot.message_handler(commands=['auth_add'])
async def auth_add_command(message):
    user_id = message.from_user.id
    if user_id != ADMIN_USER_ID:
        return
    parts = message.text.split()
    if len(parts) != 2:
        await bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /auth_add USER_ID")
        return
    try:
        new_user_id = int(parts[1])
        auth_manager.authorize_user(new_user_id)
        await bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_user_id} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
    except ValueError:
        await bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç USER_ID. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ.")

@bot.message_handler(commands=['auth_remove'])
async def auth_remove_command(message):
    user_id = message.from_user.id
    if user_id != ADMIN_USER_ID:
        return
    parts = message.text.split()
    if len(parts) != 2:
        await bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /auth_remove USER_ID")
        return
    try:
        remove_user_id = int(parts[1])
        if remove_user_id == ADMIN_USER_ID:
            await bot.send_message(message.chat.id, "–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        if remove_user_id in auth_manager.authorized_users:
            del auth_manager.authorized_users[remove_user_id]
            asyncio.create_task(auth_manager.save_authorized_users())
            await bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {remove_user_id} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö")
        else:
            await bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {remove_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except ValueError:
        await bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç USER_ID. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ.")

@bot.message_handler(commands=['auth_generate_code'])
async def auth_generate_code_command(message):
    user_id = message.from_user.id
    if user_id != ADMIN_USER_ID:
        return
    import random
    import string
    code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))
    ACCESS_CODES[code] = True
    await bot.send_message(message.chat.id, f"–ù–æ–≤—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞: `{code}`", parse_mode='Markdown')

@bot.callback_query_handler(func=lambda call: call.data.startswith("auth_"))
async def auth_callback_handler(call: CallbackQuery):
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    if call.data == "auth_enter_code":
        await bot.answer_callback_query(call.id)
        await bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞:")
    elif call.data == "auth_request_access":
        await bot.answer_callback_query(call.id)
        username = call.from_user.username
        if user_id in auth_manager.pending_auth:
            username = auth_manager.pending_auth[user_id].get('username', username)
        await notify_admin_of_request(user_id, username)
        await bot.send_message(chat_id, "‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    elif call.data.startswith("auth_approve_"):
        if user_id != ADMIN_USER_ID:
            await bot.answer_callback_query(call.id, "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ–¥–æ–±—Ä—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã")
            return
        approve_user_id = int(call.data.split("_")[2])
        auth_manager.authorize_user(approve_user_id)
        await bot.answer_callback_query(call.id)
        await bot.edit_message_text("‚úÖ –ó–∞–ø—Ä–æ—Å –æ–¥–æ–±—Ä–µ–Ω", chat_id, call.message.message_id)
        try:
            await bot.send_message(approve_user_id, "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –æ–¥–æ–±—Ä–µ–Ω!")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {approve_user_id}: {e}")
    elif call.data.startswith("auth_deny_"):
        if user_id != ADMIN_USER_ID:
            await bot.answer_callback_query(call.id, "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–∫–ª–æ–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã")
            return
        deny_user_id = int(call.data.split("_")[2])
        if deny_user_id in auth_manager.pending_auth:
            del auth_manager.pending_auth[deny_user_id]
        await bot.answer_callback_query(call.id)
        await bot.edit_message_text("‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω", chat_id, call.message.message_id)
        try:
            await bot.send_message(deny_user_id, "‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –æ—Ç–∫–ª–æ–Ω–µ–Ω.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {deny_user_id}: {e}")

@bot.callback_query_handler(func=lambda call: True)
@auth_required
async def callback_handler(call: CallbackQuery):
    user_id = call.from_user.id
    user_state = bot_instance.user_states[user_id]
    if call.data == "mode_write":
        user_state['mode'] = 'write'
        user_state['state'] = 'IDLE'
        await bot.answer_callback_query(call.id, "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ Write Mode")
        await bot.edit_message_text("–†–µ–∂–∏–º Write Mode –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞.", call.message.chat.id, call.message.message_id)
    elif call.data == "mode_chat":
        user_state['mode'] = 'chat'
        user_state['state'] = 'IDLE'
        await bot.answer_callback_query(call.id, "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ Chat Mode")
        await bot.edit_message_text("–†–µ–∂–∏–º Chat Mode –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—â–µ–Ω–∏—è.", call.message.chat.id, call.message.message_id)
        greeting_input = "Greet the user and ask how you can help with creating posts in VNVNC style."
        response = await bot_instance._generate_response(bot_instance.chat_system_prompt, greeting_input, bot_instance.get_user_model(user_id))
        await bot_instance.split_and_send_messages(call.message.chat.id, response, bot_instance.user_models.get(user_id, bot_instance.default_model))
    elif call.data == "mode_theme":
        if not auth_manager.has_theme_mode_access(user_id):
            await bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ Theme Mode")
            return
        user_state['mode'] = 'theme'
        user_state['state'] = 'IDLE'
        await bot.answer_callback_query(call.id, "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ Theme Mode")
        await bot.edit_message_text("–†–µ–∂–∏–º Theme Mode –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ü–µ–ø—Ü–∏–π –≤–µ—á–µ—Ä–∏–Ω–æ–∫.", call.message.chat.id, call.message.message_id)
    elif call.data == "help":
        help_text = """üìö –ü–æ–º–æ—â—å:
- üìù Write Mode: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ—Å—Ç–æ–≤ –ø–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–º –∏ —Ñ–æ—Ç–æ –∑–∞–ø—Ä–æ—Å–∞–º (–º–æ–∂–Ω–æ –≤–º–µ—Å—Ç–µ). –ö–Ω–æ–ø–∫–∏ Remix/–†–∞—Å—à–∏—Ä–∏—Ç—å/–°–æ–∫—Ä–∞—Ç–∏—Ç—å –ø–æ–∑–≤–æ–ª—è—é—Ç –ª–µ–≥–∫–æ —É–ª—É—á—à–∞—Ç—å —Ç–µ–∫—Å—Ç—ã.
- üí¨ Chat Mode: —Å–≤–æ–±–æ–¥–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ —Ñ–∏—Ä—Å—Ç–∏–ª—é –∏ –∏–¥–µ—è–º (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞—Ñ–∏—à–∏ –∏ —Ñ–æ—Ç–æ).
- üé® Theme Mode: —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤–µ—á–µ—Ä–∏–Ω–æ–∫ (–¥–æ—Å—Ç—É–ø–Ω–æ, –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –∞–¥–º–∏–Ω–æ–º).
- üîß –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å: –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É Gemini (–æ—Å–Ω–æ–≤–Ω–∞—è, –¥–µ—à–µ–≤–∞—è –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è) –∏ GPT (–∑–∞–ø–∞—Å–Ω–∞—è, –¥–æ—Ä–æ–≥–∞—è, –Ω–æ –ø–æ —Å—É—Ç–∏ —Ç–∞–∫–∞—è –∂–µ)
- ‚ÑπÔ∏è –ò—Å—Ç–æ—Ä–∏—è: —É–º–µ–Ω—å—à–µ–Ω–∏–µ –∏–ª–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–∞ —Å–ª—É—á–∞–π –≥–ª—é–∫–æ–≤ –º–æ–∂–Ω–æ —É–º–µ–Ω—å—à–∏—Ç—å –∏–ª–∏ —Å—Ç–µ—Ä–µ—Ç—å).
- ü´° –ö–æ–Ω—Ç–µ–∫—Å—Ç: –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –ø–æ–ª–Ω—ã–º –∏ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–º –≥–∞–π–¥–æ–º (–±–æ–ª—å—à–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ = —Ç–æ—á–Ω–µ–µ —Å—Ç–∏–ª—å, –Ω–æ –º–æ–≥—É—Ç –±—ã—Ç—å –≥–ª—é–∫–∏)
- ‚ÑπÔ∏è –ü–æ–º–æ—â—å: –ø–∞–º—è—Ç–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –∏ —Ñ—É–Ω–∫—Ü–∏—è–º.

–î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: –≤—ã–±–µ—Ä–∏—Ç–µ, —Ö–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ—Å—Ç—ã –∏–ª–∏ –æ–ø–∏—Å–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.

–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –±—Ä–∞—Ç—å –∑–∞ –æ—Å–Ω–æ–≤—É –ø–æ—Å—Ç–∞ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—à–µ–ª —Ö–æ—Ç—è –±—ã –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç—Ç–∞–ø–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–±–æ—Ä–∞.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º. –¢–µ—Ö. —Å–∞–ø–ø–æ—Ä—Ç: @kirniy"""
        markup = InlineKeyboardMarkup()
        markup.row(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu"))
        await bot.edit_message_text(help_text, call.message.chat.id, call.message.message_id, reply_markup=markup)
        await bot.answer_callback_query(call.id)
    elif call.data == "back_to_menu":
        await bot_instance.send_menu(call.message.chat.id)
        await bot.delete_message(call.message.chat.id, call.message.message_id)
    elif call.data == "history_settings":
        markup = InlineKeyboardMarkup()
        markup.row(
            InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="clear_history"),
            InlineKeyboardButton("üìè –†–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏", callback_data="set_history_size")
        )
        markup.row(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu"))
        await bot.edit_message_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:", call.message.chat.id, call.message.message_id, reply_markup=markup)
    elif call.data == "model_settings":
        markup = InlineKeyboardMarkup()
        for model_key in AVAILABLE_MODELS:
            markup.add(InlineKeyboardButton(model_key, callback_data=f"model_{model_key}"))
        markup.row(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu"))
        await bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", call.message.chat.id, call.message.message_id, reply_markup=markup)
    elif call.data == "switch_context":
        new_context = await bot_instance.switch_voice_guide()
        markup = InlineKeyboardMarkup()
        markup.row(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu"))
        await bot.edit_message_text(f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ {new_context}.", call.message.chat.id, call.message.message_id, reply_markup=markup)
        await bot.answer_callback_query(call.id, f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ {new_context}")
    elif call.data == "clear_history":
        bot_instance.chat_histories[user_id] = []
        asyncio.create_task(bot_instance._save_chat_history(user_id))
        await bot.answer_callback_query(call.id, "–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞")
        markup = InlineKeyboardMarkup()
        markup.row(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="history_settings"))
        await bot.edit_message_text("–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞!", call.message.chat.id, call.message.message_id, reply_markup=markup)
    elif call.data == "set_history_size":
        await bot.edit_message_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /set_history_size <—á–∏—Å–ª–æ> –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ (1-20).",
            call.message.chat.id,
            call.message.message_id
        )
    elif call.data.startswith("model_"):
        model_key = call.data.split("_")[1]
        success, msg = await bot_instance.switch_model(user_id, model_key)
        await bot.answer_callback_query(call.id, msg)
        if success:
            markup = InlineKeyboardMarkup()
            markup.row(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="model_settings"))
            await bot.edit_message_text(f"–ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {model_key}", call.message.chat.id, call.message.message_id, reply_markup=markup)
    elif call.data.startswith("type_"):
        type_descriptions = {
            "type_event": {"name": "—Å–æ–±—ã—Ç–∏–µ", "description": "–∞–Ω–æ–Ω—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É –∫–∞–∫ –≤ voice guide."},
            "type_engagement": {"name": "–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ", "description": "–∫–æ—Ä–æ—Ç–∫–∏–µ –±—Ä–æ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è engagement."},
            "type_live": {"name": "–ª–∞–π–≤-–∞–ø–¥–µ–π—Ç", "description": "—Å—Ä–µ–¥–Ω–µ–µ –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–µ–¥–∏ —Ä–∞–±–æ—Ç—ã –∫–ª—É–±–∞."},
            "type_general": {"name": "–æ–±—â–∏–π —Ç–µ–∫—Å—Ç", "description": "—Ç–µ–∫—Å—Ç –≤ –±—Ä–µ–Ω–¥–æ–≤–æ–º —Å—Ç–∏–ª–µ –∫–ª—É–±–∞, –≤–æ–∑–º–æ–∂–Ω–æ –¥–ª—è —Å–∞–π—Ç–∞."}
        }
        selected_type = type_descriptions[call.data]
        user_state['type'] = selected_type
        user_state['state'] = 'WAITING_FOR_NUMBER'
        await bot_instance.send_number_selection(call.message.chat.id)
    elif call.data.startswith("number_"):
        number = int(call.data.split("_")[1])
        user_state['number'] = number
        user_state['state'] = 'IDLE'
        typing_task = asyncio.create_task(bot_instance._keep_typing(call.message.chat.id))
        try:
            logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è {number} –ø–æ—Å—Ç–æ–≤")
            if user_state['image_path'] and os.path.exists(user_state['image_path']):
                logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º")
                base64_image = base64.b64encode(open(user_state['image_path'], 'rb').read()).decode('utf-8')
                prompt = f"""–í–ê–ñ–ù–û: –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –†–û–í–ù–û {number} —Ä–∞–∑–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ —Ç–∏–ø–∞ "{user_state['type']['name']}" (–Ω–µ –±–æ–ª—å—à–µ –∏ –Ω–µ –º–µ–Ω—å—à–µ).
–¢–∏–ø –ø–æ—Å—Ç–∞ - {user_state['type']['description']}
–ò—Å–ø–æ–ª—å–∑—É–π —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, —Ç–µ–º–∞—Ç–∏–∫—É –∏ —Ç–µ–∫—Å—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
–¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞: {user_state['prompt']}.
–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Ä–∞–∑–¥–µ–ª—è–π –∫–∞–∂–¥—ã–π –ø–æ—Å—Ç —á–µ—Ä–µ–∑ ---"""
                user_input = {'text': prompt, 'image': base64_image}
            else:
                logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                prompt = f"""–í–ê–ñ–ù–û: –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –†–û–í–ù–û {number} —Ä–∞–∑–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ —Ç–∏–ø–∞ "{user_state['type']['name']}" (–Ω–µ –±–æ–ª—å—à–µ –∏ –Ω–µ –º–µ–Ω—å—à–µ).
–¢–∏–ø –ø–æ—Å—Ç–∞ - {user_state['type']['description']}
–¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞: {user_state['prompt']}.
–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Ä–∞–∑–¥–µ–ª—è–π –∫–∞–∂–¥—ã–π –ø–æ—Å—Ç —á–µ—Ä–µ–∑ ---"""
                user_input = prompt
            logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞")
            max_retries = 3
            current_try = 0
            model = bot_instance.get_user_model(user_id)
            while current_try < max_retries:
                response = await bot_instance._generate_response(bot_instance.write_system_prompt, user_input, model)
                posts = [post.strip() for post in response.split('---') if post.strip()]
                if len(posts) == number or model['provider'] != 'Gemini':
                    break
                current_try += 1
                if current_try < max_retries:
                    logger.warning(f"Gemini —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª {len(posts)} –≤–º–µ—Å—Ç–æ {number}. –ü–æ–ø—ã—Ç–∫–∞ {current_try + 1}")
                    if isinstance(user_input, dict):
                        user_input['text'] = f"–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –°–¢–†–û–ì–û {number} –ø–æ—Å—Ç–æ–≤, –Ω–µ –º–µ–Ω—å—à–µ. –ü—Ä–µ–¥—ã–¥—É—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–ª–∞ —Ç–æ–ª—å–∫–æ {len(posts)} –ø–æ—Å—Ç–æ–≤. " + user_input['text']
                    else:
                        user_input = f"–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –°–¢–†–û–ì–û {number} –ø–æ—Å—Ç–æ–≤, –Ω–µ –º–µ–Ω—å—à–µ. –ü—Ä–µ–¥—ã–¥—É—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–ª–∞ —Ç–æ–ª—å–∫–æ {len(posts)} –ø–æ—Å—Ç–æ–≤. " + user_input
            if number > 2 and len(posts) == number:
                sorted_posts = sorted(posts, key=len)
                user_state['last_posts'] = sorted_posts
            else:
                user_state['last_posts'] = posts
            prompt = user_state['prompt']
            type_name = user_state['type']['name']
            number = user_state['number']
            image_indicator = "[Image provided]" if user_state['image_path'] else ""
            user_input_str = f"{image_indicator} Prompt: {prompt}\nType: {type_name}\nNumber: {number}"
            posts_str = "\n\n---\n\n".join(user_state['last_posts'])
            await bot_instance.forward_to_admin(
                user_input=user_input_str,
                bot_response=posts_str,
                user_id=user_id,
                mode="WRITE MODE",
                username=call.from_user.username
            )
            if len(posts) < number and model['provider'] == 'Gemini':
                await bot.send_message(call.message.chat.id, f"‚ö†Ô∏è Gemini —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª —Ç–æ–ª—å–∫–æ {len(posts)} –ø–æ—Å—Ç–æ–≤ –≤–º–µ—Å—Ç–æ {number}.")
            for i, post in enumerate(user_state['last_posts']):
                await bot_instance.send_post_with_refinement_buttons(call.message.chat.id, post, i)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤: {e}", exc_info=True)
            await bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤")
            if user_state['image_path'] and os.path.exists(user_state['image_path']):
                os.remove(user_state['image_path'])
            user_state['image_path'] = None
        finally:
            typing_task.cancel()
            try:
                await typing_task
            except asyncio.CancelledError:
                pass
    elif call.data == "image_write":
        user_state['state'] = 'WAITING_FOR_TYPE'
        await bot_instance.send_type_selection(call.message.chat.id)
    elif call.data == "image_describe":
        user_state['state'] = 'IDLE'
        try:
            logger.info("–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            if not user_state.get('image_path') or not os.path.exists(user_state['image_path']):
                logger.error(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {user_state.get('image_path')}")
                await bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
                return
            await bot.send_chat_action(call.message.chat.id, 'typing')
            with open(user_state['image_path'], 'rb') as img_file:
                base64_image = base64.b64encode(img_file.read()).decode('utf-8')
            user_input = {
                'text': "–û–ø–∏—à–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –¥–µ—Ç–∞–ª—è—Ö, –æ–±—Ä–∞—â–∞—è –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –≤—Å–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏ —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å.",
                'image': base64_image
            }
            response = await bot_instance._generate_response(bot_instance.image_system_prompt, user_input, bot_instance.get_user_model(user_id))
            user_input_str = "[Image sent for description]" + (f" with caption: {user_state['prompt']}" if user_state['prompt'] else "")
            await bot_instance.forward_to_admin(
                user_input=user_input_str,
                bot_response=response,
                user_id=user_id,
                mode="IMAGE DESCRIBE",
                username=call.from_user.username
            )
            await bot_instance.split_and_send_messages(call.message.chat.id, response, bot_instance.user_models.get(user_id, bot_instance.default_model))
            await bot.answer_callback_query(call.id)
            if user_state['image_path'] and os.path.exists(user_state['image_path']):
                os.remove(user_state['image_path'])
            user_state['image_path'] = None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}", exc_info=True)
            await bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            if user_state['image_path'] and os.path.exists(user_state['image_path']):
                os.remove(user_state['image_path'])
            user_state['image_path'] = None
    elif call.data.startswith("rewrite_"):
        index = int(call.data.split("_")[1])
        if index < len(user_state['last_posts']):
            await bot.send_chat_action(call.message.chat.id, 'typing')
            post = user_state['last_posts'][index]
            refinement_prompt = f"–ü–µ—Ä–µ–ø–∏—à–∏ —ç—Ç–æ—Ç –ø–æ—Å—Ç –≤ —Ç–æ–º –∂–µ —Å—Ç–∏–ª–µ: {post}. –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–æ—Å—Ç –Ω–∞–ø–∏—à–∏, –Ω–µ –±–æ–ª—å—à–µ"
            response = await bot_instance._generate_response(bot_instance.write_system_prompt, refinement_prompt, bot_instance.get_user_model(user_id))
            new_post = response.strip()
            user_state['last_posts'][index] = new_post
            await bot_instance.send_post_with_refinement_buttons(call.message.chat.id, new_post, index)
    elif call.data.startswith("expand_"):
        index = int(call.data.split("_")[1])
        if index < len(user_state['last_posts']):
            await bot.send_chat_action(call.message.chat.id, 'typing')
            post = user_state['last_posts'][index]
            refinement_prompt = f"–†–∞—Å—à–∏—Ä—å —ç—Ç–æ—Ç –ø–æ—Å—Ç, –¥–æ–±–∞–≤–∏–≤ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π: {post}. –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–æ—Å—Ç –Ω–∞–ø–∏—à–∏, –Ω–µ –±–æ–ª—å—à–µ"
            response = await bot_instance._generate_response(bot_instance.write_system_prompt, refinement_prompt, bot_instance.get_user_model(user_id))
            new_post = response.strip()
            user_state['last_posts'][index] = new_post
            await bot_instance.send_post_with_refinement_buttons(call.message.chat.id, new_post, index)
    elif call.data.startswith("shorten_"):
        index = int(call.data.split("_")[1])
        if index < len(user_state['last_posts']):
            await bot.send_chat_action(call.message.chat.id, 'typing')
            post = user_state['last_posts'][index]
            refinement_prompt = f"–°–æ–∫—Ä–∞—Ç–∏ —ç—Ç–æ—Ç –ø–æ—Å—Ç, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—É—Ç—å: {post}. –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–æ—Å—Ç –Ω–∞–ø–∏—à–∏, –Ω–µ –±–æ–ª—å—à–µ"
            response = await bot_instance._generate_response(bot_instance.write_system_prompt, refinement_prompt, bot_instance.get_user_model(user_id))
            new_post = response.strip()
            user_state['last_posts'][index] = new_post
            await bot_instance.send_post_with_refinement_buttons(call.message.chat.id, new_post, index)
    elif call.data == "cancel":
        user_state['state'] = 'IDLE'
        if user_state['image_path'] and os.path.exists(user_state['image_path']):
            os.remove(user_state['image_path'])
            user_state['image_path'] = None
        await bot.edit_message_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", call.message.chat.id, call.message.message_id)
        await bot.answer_callback_query(call.id)
        return
    elif call.data == "admin_menu":
        if user_id != ADMIN_USER_ID:
            await bot.answer_callback_query(call.id, "–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        markup = InlineKeyboardMarkup()
        markup.row(InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_list_users"))
        markup.row(InlineKeyboardButton("üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞", callback_data="admin_generate_code"))
        markup.row(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu"))
        await bot.edit_message_text("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", call.message.chat.id, call.message.message_id, reply_markup=markup)
        await bot.answer_callback_query(call.id)
    elif call.data == "admin_list_users":
        if user_id != ADMIN_USER_ID:
            await bot.answer_callback_query(call.id, "–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        users_list = list(auth_manager.authorized_users.keys())
        markup = InlineKeyboardMarkup()
        page = user_state.get('admin_user_page', 0)
        start_idx = page * 5
        end_idx = min(start_idx + 5, len(users_list))
        for i in range(start_idx, end_idx):
            user_id_to_show = users_list[i]
            if user_id_to_show == ADMIN_USER_ID:
                markup.row(InlineKeyboardButton(f"üëë {user_id_to_show} (–ê–¥–º–∏–Ω)", callback_data=f"admin_noop"))
            else:
                theme_mode_status = "‚úÖ" if auth_manager.has_theme_mode_access(user_id_to_show) else "‚ùå"
                markup.row(
                    InlineKeyboardButton(f"üë§ {user_id_to_show}", callback_data=f"admin_noop"),
                    InlineKeyboardButton(f"Theme Mode: {theme_mode_status}", callback_data=f"admin_toggle_theme_{user_id_to_show}"),
                    InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"admin_remove_user_{user_id_to_show}")
                )
        if len(users_list) > 5:
            pagination_buttons = []
            if page > 0:
                pagination_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data="admin_prev_page"))
            if end_idx < len(users_list):
                pagination_buttons.append(InlineKeyboardButton("‚û°Ô∏è", callback_data="admin_next_page"))
            if pagination_buttons:
                markup.row(*pagination_buttons)
        markup.row(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu"))
        await bot.edit_message_text(f"–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(users_list)}):", call.message.chat.id, call.message.message_id, reply_markup=markup)
        await bot.answer_callback_query(call.id)
    elif call.data == "admin_prev_page":
        if user_id != ADMIN_USER_ID:
            await bot.answer_callback_query(call.id, "–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        if 'admin_user_page' not in user_state:
            user_state['admin_user_page'] = 0
        if user_state['admin_user_page'] > 0:
            user_state['admin_user_page'] -= 1
        await bot.answer_callback_query(call.id)
        call.data = "admin_list_users"
        await callback_handler(call)
    elif call.data == "admin_next_page":
        if user_id != ADMIN_USER_ID:
            await bot.answer_callback_query(call.id, "–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        if 'admin_user_page' not in user_state:
            user_state['admin_user_page'] = 0
        max_pages = len(auth_manager.authorized_users) // 5
        if user_state['admin_user_page'] < max_pages:
            user_state['admin_user_page'] += 1
        await bot.answer_callback_query(call.id)
        call.data = "admin_list_users"
        await callback_handler(call)
    elif call.data.startswith("admin_remove_user_"):
        if user_id != ADMIN_USER_ID:
            await bot.answer_callback_query(call.id, "–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        user_id_to_remove = int(call.data.split("_")[3])
        markup = InlineKeyboardMarkup()
        markup.row(
            InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"admin_confirm_remove_{user_id_to_remove}"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_list_users")
        )
        await bot.edit_message_text(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_to_remove}?",
                                   call.message.chat.id, call.message.message_id, reply_markup=markup)
        await bot.answer_callback_query(call.id)
    elif call.data.startswith("admin_confirm_remove_"):
        if user_id != ADMIN_USER_ID:
            await bot.answer_callback_query(call.id, "–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        user_id_to_remove = int(call.data.split("_")[3])
        if user_id_to_remove == ADMIN_USER_ID:
            await bot.answer_callback_query(call.id, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        if user_id_to_remove in auth_manager.authorized_users:
            del auth_manager.authorized_users[user_id_to_remove]
            asyncio.create_task(auth_manager.save_authorized_users())
            try:
                await bot.send_message(user_id_to_remove, "‚ùå –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –±—ã–ª –æ—Ç–æ–∑–≤–∞–Ω.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_to_remove}: {e}")
            await bot.answer_callback_query(call.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id_to_remove} —É–¥–∞–ª–µ–Ω")
        else:
            await bot.answer_callback_query(call.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id_to_remove} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        call.data = "admin_list_users"
        await callback_handler(call)
    elif call.data == "admin_generate_code":
        if user_id != ADMIN_USER_ID:
            await bot.answer_callback_query(call.id, "–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        import random
        import string
        code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))
        ACCESS_CODES[code] = True
        markup = InlineKeyboardMarkup()
        markup.row(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu"))
        await bot.edit_message_text(f"–ù–æ–≤—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞: `{code}`\n\n–≠—Ç–æ—Ç –∫–æ–¥ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.",
                                  call.message.chat.id, call.message.message_id, parse_mode='Markdown', reply_markup=markup)
        await bot.answer_callback_query(call.id)
    elif call.data.startswith("admin_toggle_theme_"):
        if user_id != ADMIN_USER_ID:
            await bot.answer_callback_query(call.id, "–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        toggle_user_id = int(call.data.split("_")[3])
        if toggle_user_id in auth_manager.authorized_users:
            current_status = auth_manager.authorized_users[toggle_user_id].get('theme_mode_enabled', False)
            auth_manager.authorized_users[toggle_user_id]['theme_mode_enabled'] = not current_status
            asyncio.create_task(auth_manager.save_authorized_users())
            await bot.answer_callback_query(call.id, f"Theme Mode –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {toggle_user_id} –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω")
        else:
            await bot.answer_callback_query(call.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {toggle_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        call.data = "admin_list_users"
        await callback_handler(call)
    elif call.data == "admin_noop":
        await bot.answer_callback_query(call.id)

@bot.message_handler(content_types=['text'])
@auth_required
async def text_handler(message):
    await bot_instance.handle_text(message)

@bot.message_handler(content_types=['photo'])
@auth_required
async def photo_handler(message):
    await bot_instance.handle_photo(message)

async def main():
    await bot_instance.start()

if __name__ == "__main__":
    asyncio.run(main())